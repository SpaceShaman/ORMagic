{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":"<p>The main goal of ORMagic is to provide a simple and easy-to-use ORM for Python, that is easy to understand and use, while still providing the necessary features to interact with a database. Is based on the Pydantic model and extends it with the ability to interact with SQLite database.</p>"},{"location":"#simple-example","title":"Simple example","text":"<pre><code>from ormagic import DBModel\n\nclass User(DBModel):\n    name: str\n    age: int\n\nUser.create_table()\n\nUser(name=\"John\", age=30).save()\n\nUser.get(name=\"John\")\n&gt;&gt;&gt; User(id=1, name='John', age=30)\n</code></pre>"},{"location":"instalation/","title":"Instalation","text":"<p>You can install ORMagic using pip:</p> <pre><code>pip install ORMagic\n</code></pre> <p>Or you can install the latest version from the GitHub repository:</p> <pre><code>git clone git@github.com:SpaceShaman/ORMagic.git\ncd ORMagic\npip install .\n</code></pre>"},{"location":"Development/changelog/","title":"Changelog","text":"<p>Changes for each release are thoroughly documented in release notes</p>"},{"location":"Development/contributing/","title":"Contributing","text":"<p>Contributions are welcome! Feel free to open an issue or submit a pull request. I would like to keep the library to be safe as possible, so i would appreciate if you cover any new feature with tests to maintain 100% coverage.</p>"},{"location":"Development/contributing/#install-in-a-development-environment","title":"Install in a development environment","text":"<ol> <li> <p>First, clone the repository:</p> <pre><code>git clone git@github.com:SpaceShaman/ORMagic.git\n</code></pre> </li> <li> <p>Install poetry if you don't have, here you can find the instructions</p> </li> <li> <p>Create a virtual environment and install the dependencies:</p> <pre><code>cd ORMagic\npoetry install --no-root\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> <pre><code>poetry shell\n</code></pre> </li> </ol>"},{"location":"Development/contributing/#run-tests","title":"Run tests","text":"<p>If you in the virtual environment, you can run the tests with the following command:</p> <pre><code>pytest\n</code></pre> <p>You can also run the tests with coverage:</p> <pre><code>pytest --cov=ormagic\n</code></pre>"},{"location":"Development/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 SpaceShaman</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Development/roadmap/","title":"Features and Roadmap","text":"<ul> <li> Define table schema using Pydantic models</li> <li> Basic CRUD operations<ul> <li> Save data to the database</li> <li> Read data from the database</li> <li> Update data in the database</li> <li> Delete data from the database</li> </ul> </li> <li> Relationships between tables<ul> <li> One-to-many<ul> <li> Create a tables with a foreign key</li> <li> Save data with a foreign key</li> <li> Read data with a foreign key</li> <li> Update data with a foreign key</li> <li> Delete data with a foreign key<ul> <li> Cascade</li> <li> Set null</li> <li> Restrict</li> <li> Set default</li> <li> No action</li> </ul> </li> </ul> </li> <li> One-to-one</li> <li> Many-to-many</li> </ul> </li> <li> Unique constraints</li> <li> Remove table</li> <li> Read all data from the database</li> <li> Filter data and retrieve multiple records<ul> <li> Equal</li> <li> Not equal</li> <li> Greater than</li> <li> Greater than or equal</li> <li> Less than</li> <li> Less than or equal</li> <li> Like (Pattern matching with % and _)</li> <li> Not like (Pattern matching with % and _)</li> <li> In (List of values)</li> <li> Not in (List of values)</li> <li> Between (Two values)</li> <li> Not between (Two values)</li> <li> Q objects to combine filters (AND, OR, NOT)</li> </ul> </li> <li> Protect against SQL injection</li> <li> Order by</li> <li> Limit and offset</li> <li> Update table schema<ul> <li> Add new column</li> <li> Rename column</li> <li> Drop column</li> </ul> </li> <li> Custom primary key</li> <li> Transactions</li> <li> Functions<ul> <li> Aggregate functions</li> <li> String functions</li> <li> Date and time functions</li> <li> Mathematical functions</li> <li> Control flow functions</li> </ul> </li> <li> Migrations</li> <li> Integration with other databases</li> </ul>"},{"location":"Usage/create-table/","title":"Create Table","text":"<p>To create a table in the database, first create a class that inherits from <code>DBModel</code> and call the <code>create_table</code> method.</p> PythonSQL Result <pre><code>from ormagic import DBModel\n\nclass User(DBModel):\n    name: str\n    age: int\n\nUser.create_table()\n</code></pre> <pre><code>CREATE TABLE IF NOT EXISTS user (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    age INTEGER NOT NULL\n);\n</code></pre>"},{"location":"Usage/custom-primary-key/","title":"Custom primary key","text":"<p>By default, <code>ORMagic</code> will create a primary key column named <code>id</code> for each model. However, you can specify a custom primary key by setting the <code>primary_key</code> attribute on the model field to <code>True</code>.</p> PythonSQL Result <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    custom_id: int = DBField(primary_key=True)\n    name: str\n\nUser.create_table()\n</code></pre> <pre><code>CREATE TABLE IF NOT EXISTS user (\n    custom_id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL\n);\n</code></pre>"},{"location":"Usage/deleting-updating/","title":"Deleting and updating tables","text":"<p>To delete a table, use the <code>drop_table</code> method.</p> PythonSQL Result <pre><code>User.drop_table()\n</code></pre> <pre><code>DROP TABLE IF EXISTS user;\n</code></pre> <p>To update a table, use the <code>update_table</code> method.</p> PythonSQL Result <pre><code>User.update_table()\n</code></pre> <pre><code>ALTER TABLE user ADD COLUMN email TEXT;\n</code></pre> <p>There are some restrictions on updating tables</p> <ul> <li>The new column cannot have <code>unique</code> or <code>primary_key</code> set to <code>True</code>.</li> <li>The new column needs to have a default value or set as optional.</li> <li>You can rename, drop and add multiple columns at once but you cannot mix this tree operations in one call.</li> </ul>"},{"location":"Usage/fastapi/","title":"Integration with FastAPI","text":"<p>Because ORMagic is based on Pydantic, it can be easily integrated with FastAPI. Below is an example of how to use ORMagic with FastAPI to create a simple CRUD REST API.</p> <pre><code>from fastapi import FastAPI\nfrom ormagic import DBModel\n\napp = FastAPI()\n\nclass User(DBModel):\n    name: str\n    age: int\n\nUser.create_table()\n\n@app.post(\"/users/\")\ndef create_user(user: User):\n    return user.save()\n\n@app.get(\"/users/\")\ndef read_users():\n    return User.all()\n\n@app.get(\"/users/{id}\")\ndef read_user(id: int):\n    return User.get(id=id)\n\n@app.put(\"/users/{id}\")\ndef update_user(id: int, user: User):\n    user.id = id\n    return user.save()\n\n@app.delete(\"/users/{id}\")\ndef delete_user(id: int):\n    User.get(id=id).delete()\n    return {\"message\": \"User deleted\"}\n</code></pre>"},{"location":"Usage/filtering/","title":"Filtering data","text":"<p>To filter data and retrieve multiple records, use the <code>filter</code> method. There are several filter options available:</p>"},{"location":"Usage/filtering/#equal","title":"Equal","text":"PythonSQL Result <pre><code>User.filter(name=\"John\")\n</code></pre> <pre><code>SELECT * FROM user WHERE name = 'John';\n</code></pre>"},{"location":"Usage/filtering/#not-equal","title":"Not equal","text":"PythonSQL Result <pre><code>User.filter(name__ne=\"John\")\n</code></pre> <pre><code>SELECT * FROM user WHERE name != 'John';\n</code></pre>"},{"location":"Usage/filtering/#greater-than","title":"Greater than","text":"PythonSQL Result <pre><code>User.filter(age__gt=30)\n</code></pre> <pre><code>SELECT * FROM user WHERE age &gt; 30;\n</code></pre>"},{"location":"Usage/filtering/#greater-than-or-equal","title":"Greater than or equal","text":"PythonSQL Result <pre><code>User.filter(age__gte=30)\n</code></pre> <pre><code>SELECT * FROM user WHERE age &gt;= 30;\n</code></pre>"},{"location":"Usage/filtering/#less-than","title":"Less than","text":"PythonSQL Result <pre><code>User.filter(age__lt=30)\n</code></pre> <pre><code>SELECT * FROM user WHERE age &lt; 30;\n</code></pre>"},{"location":"Usage/filtering/#less-than-or-equal","title":"Less than or equal","text":"PythonSQL Result <pre><code>User.filter(age__lte=30)\n</code></pre> <pre><code>SELECT * FROM user WHERE age &lt;= 30;\n</code></pre>"},{"location":"Usage/filtering/#like-pattern-matching-with-and-_","title":"Like (Pattern matching with % and _)","text":"PythonSQL Result <pre><code>User.filter(name__like=\"%Cat%\")\n</code></pre> <pre><code>SELECT * FROM user WHERE name LIKE '%Cat%';\n</code></pre>"},{"location":"Usage/filtering/#not-like-pattern-matching-with-and-_","title":"Not like (Pattern matching with % and _)","text":"PythonSQL Result <pre><code>User.filter(name__nlike=\"%Cat%\")\n</code></pre> <pre><code>SELECT * FROM user WHERE name NOT LIKE '%Cat%';\n</code></pre>"},{"location":"Usage/filtering/#in-list-of-values","title":"In (List of values)","text":"PythonSQL Result <pre><code>User.filter(name__in=[\"John\", \"Alice\"])\n</code></pre> <pre><code>SELECT * FROM user WHERE name IN ('John', 'Alice');\n</code></pre>"},{"location":"Usage/filtering/#not-in-list-of-values","title":"Not in (List of values)","text":"PythonSQL Result <pre><code>User.filter(name__nin=[\"John\", \"Alice\"])\n</code></pre> <pre><code>SELECT * FROM user WHERE name NOT IN ('John', 'Alice');\n</code></pre>"},{"location":"Usage/filtering/#between-two-values","title":"Between (Two values)","text":"PythonSQL Result <pre><code>User.filter(age__between=[30, 40])\n</code></pre> <pre><code>SELECT * FROM user WHERE age BETWEEN 30 AND 40;\n</code></pre>"},{"location":"Usage/filtering/#not-between-two-values","title":"Not between (Two values)","text":"PythonSQL Result <pre><code>User.filter(age__nbetween=[30, 40])\n</code></pre> <pre><code>SELECT * FROM user WHERE age NOT BETWEEN 30 AND 40;\n</code></pre>"},{"location":"Usage/filtering/#complex-filters-with-q-objects-and-or-not","title":"Complex filters with Q objects (AND, OR, NOT)","text":"<p>Keyword arguments are combined with AND by default, but you can use Q objects to combine filters with OR, NOT, and AND.</p> <p>For example, to filter users with age greater than 30 or name equal to \"Alice\":</p> PythonSQL Result <pre><code>from ormagic import Q\n\nUser.filter(Q(age__gt=30) | Q(name=\"Alice\"))\n</code></pre> <pre><code>WHERE age &gt; 30 OR name = 'Alice'\n</code></pre> <p>To filter users with age less than 30 and name not equal to \"Alice\":</p> PythonSQL Result <pre><code>User.filter(Q(age__lt=30) &amp; ~Q(name=\"Alice\"))\n</code></pre> <pre><code>WHERE age &lt; 30 AND name != 'Alice'\n</code></pre> <p>You can also combine multiple conditions in one Q object:</p> PythonSQL Result <pre><code>User.filter(Q(age__lt=30, name=\"John\") | Q(age__gt=30, name=\"Alice\"))\n</code></pre> <pre><code>WHERE (age &lt; 30 AND name = 'John') OR (age &gt; 30 AND name = 'Alice')\n</code></pre> <p>You can even build very complex queries by nesting Q objects:</p> PythonSQL Result <pre><code>q1 = Q(name=\"Alice\")\nq2 = Q(age__lt=25)\nq3 = Q(weight__gte=70)\nq4 = Q(name=\"Bob\")\nq5 = Q(age__gt=30)\nq6 = Q(weight__lte=80)\nq = Q(q1 &amp; q2 | q3) | Q(q4 &amp; q5 | q6)\nUser.filter(q)\n</code></pre> <pre><code>WHERE (name = 'Alice' AND age &lt; 25 OR weight &gt;= 70) OR (name = 'Bob' AND age &gt; 30 OR weight &lt;= 80)\n</code></pre> <p>Inspiration</p> <p>The <code>Q</code> object is inspired by Django's <code>Q object</code>, which is used to build complex queries in Django ORM.</p>"},{"location":"Usage/foreign-keys/","title":"Define foreign keys","text":"<p>To define a foreign key, use other models as fields in the model. By default, the foreign key will be set to <code>CASCADE</code>, but you can change it by setting the <code>on_delete</code> parameter of the pydantic field to one of the following values: <code>CASCADE</code>, <code>SET NULL</code>, <code>RESTRICT</code>, <code>SET DEFAULT</code>, <code>NO ACTION</code>.</p>"},{"location":"Usage/foreign-keys/#create-tables-with-foreign-keys","title":"Create tables with foreign keys","text":"PythonSQL Result <pre><code>from ormagic import DBModel\n\nclass User(DBModel):\n    name: str\n\nclass Post(DBModel):\n    title: str\n    content: str\n    user: User # Define a foreign key with default on_delete=CASCADE\n\nUser.create_table()\nPost.create_table()\n</code></pre> <pre><code>CREATE TABLE user (\n    id INTEGER PRIMARY KEY\n);\nCREATE TABLE post (\n    id INTEGER PRIMARY KEY,\n    title TEXT NOT NULL,\n    content TEXT NOT NULL,\n    user INTEGER NOT NULL,\n    FOREIGN KEY (user) REFERENCES user (id) ON DELETE CASCADE\n);\n</code></pre>"},{"location":"Usage/foreign-keys/#save-data-with-foreign-keys","title":"Save data with foreign keys","text":"PythonSQL Result <pre><code>user = User(name=\"John\")\nuser.save()\n\nPost(title=\"Hello\", content=\"World\", user=user).save()\n</code></pre> <pre><code>INSERT INTO user (name) VALUES ('John');\nINSERT INTO post (title, content, user) VALUES ('Hello', 'World', 1);\n</code></pre> <p>You can also save child models with new parent object in one step, this will save the parent object first and then the child object</p> PythonSQL Result <pre><code>Post(title=\"Hello\", content=\"World\", user=User(name=\"Alice\")).save()\n</code></pre> <pre><code>INSERT INTO user (name) VALUES ('Alice');\nINSERT INTO post (title, content, user) VALUES ('Hello', 'World', 2);\n</code></pre>"},{"location":"Usage/foreign-keys/#define-foreign-key-with-custom-on_delete","title":"Define foreign key with custom on_delete","text":"<p>To define a foreign key with a custom <code>on_delete</code> behavior, set the <code>on_delete</code> parameter of the <code>DBField</code> to one of the following values: <code>CASCADE</code>, <code>SET NULL</code>, <code>RESTRICT</code>, <code>SET DEFAULT</code>, <code>NO ACTION</code>.</p> CASCADERESTRICTNO ACTIONSET DEFAULTSET NULL <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n\nclass Post(DBModel):\n    title: str\n    content: str\n    user: User = DBField(on_delete=\"CASCADE\")\n\nUser.create_table()\nPost.create_table()\n</code></pre> <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n\nclass Post(DBModel):\n    title: str\n    content: str\n    user: User = DBField(on_delete=\"RESTRICT\")\n\nUser.create_table()\nPost.create_table()\n</code></pre> <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n\nclass Post(DBModel):\n    title: str\n    content: str\n    user: User = DBField(on_delete=\"NO ACTION\")\n\nUser.create_table()\nPost.create_table()\n</code></pre> <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n\nclass Post(DBModel):\n    title: str\n    content: str\n    user: User = DBField(on_delete=\"SET DEFAULT\", default=1)\n\nUser.create_table()\nPost.create_table()\n</code></pre> <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n\nclass Post(DBModel):\n    title: str\n    content: str\n    user: User = DBField(on_delete=\"SET NULL\", default=None)\n\nUser.create_table()\nPost.create_table()\n</code></pre>"},{"location":"Usage/foreign-keys/#one-to-one-relationships","title":"One to one relationships","text":"<p>To define a one-to-one relationship, use the <code>unique</code> parameter of the <code>DBField</code> to <code>True</code>. You can find more information about one-to-one relationships in the Unique constraints section.</p>"},{"location":"Usage/limit-and-offset/","title":"Limit and offset","text":"<p>To limit the number of results, use the <code>limit</code> parameter.</p> PythonSQL Result <pre><code>User.all(limit=10)\n</code></pre> <pre><code>SELECT * FROM user LIMIT 10;\n</code></pre> <p>You can also use the <code>offset</code> parameter to skip a certain number of results to implement pagination.</p> PythonSQL Result <pre><code>User.all(limit=10, offset=10)\n</code></pre> <pre><code>SELECT * FROM user LIMIT 10 OFFSET 10;\n</code></pre> <p>You can also use the <code>limit</code> and <code>offset</code> parameters with filters and order by.</p> PythonSQL Result <pre><code>User.filter(age__between=[30, 40], order_by=\"age\", limit=10, offset=10)\n</code></pre> <pre><code>SELECT * FROM user WHERE age BETWEEN 30 AND 40 ORDER BY age LIMIT 10 OFFSET 10;\n</code></pre>"},{"location":"Usage/many-to-many/","title":"Many-to-many relationships","text":"<p>To define a many-to-many relationship, use list of other model as a field in the model.</p>"},{"location":"Usage/many-to-many/#create-tables","title":"Create tables","text":"PythonSQL Result <pre><code>from ormagic import DBModel\n\nclass Player(DBModel):\n    name: str\n    teams: list[\"Team\"] = []\n\nclass Team(DBModel):\n    name: str\n    players: list[Player] = []\n\nPlayer.create_table()\nTeam.create_table()\n</code></pre> <pre><code>CREATE TABLE IF NOT EXISTS player (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL\n);\nCREATE TABLE IF NOT EXISTS team (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL\n);\nCREATE TABLE IF NOT EXISTS player_team (\n    player_id INTEGER NOT NULL,\n    team_id INTEGER NOT NULL,\n    PRIMARY KEY (player_id, team_id),\n    FOREIGN KEY(player_id) REFERENCES player(id),\n    FOREIGN KEY(team_id) REFERENCES team(id)\n);\n</code></pre>"},{"location":"Usage/many-to-many/#save-data-with-many-to-many-relationships","title":"Save data with many-to-many relationships","text":"PythonSQL Result <pre><code>player0 = Player(name=\"Messi\").save()\nplayer1 = Player(name=\"Ronaldo\").save()\n\nTeam(name=\"Barcelona\", players=[player0, player1]).save()\n</code></pre> <pre><code>INSERT INTO player (name) VALUES ('Messi');\nINSERT INTO player (name) VALUES ('Ronaldo');\nINSERT INTO team (name) VALUES ('Barcelona');\nINSERT INTO player_team (player_id, team_id) VALUES (1, 1);\nINSERT INTO player_team (player_id, team_id) VALUES (2, 1);\n</code></pre>"},{"location":"Usage/many-to-many/#read-data-with-many-to-many-relationships","title":"Read data with many-to-many relationships","text":"PythonSQL Result <pre><code>Team.get(id=1)\n&gt;&gt;&gt; Team(id=1, name='Barcelona', players=[Player(id=1, name='Messi'), Player(id=2, name='Ronaldo')])\n</code></pre> <pre><code>SELECT * FROM team WHERE id = 1;\nSELECT * FROM player WHERE id IN (SELECT player_id FROM player_team WHERE team_id = 1);\n</code></pre>"},{"location":"Usage/order-by/","title":"Order by","text":"<p>To order the results, use the <code>filter</code> or <code>all</code> method with the <code>order_by</code> parameter.</p> PythonSQL Result <pre><code>User.all(order_by=\"age\")\n</code></pre> <pre><code>SELECT * FROM user ORDER BY age;\n</code></pre> <p>To order the results in descending order, use the <code>-</code> sign before the field name.</p> PythonSQL Result <pre><code>User.all(order_by=\"-age\")\n</code></pre> <pre><code>SELECT * FROM user ORDER BY age DESC;\n</code></pre> <p>You can also order by multiple fields and mix them with filters.</p> PythonSQL Result <pre><code>User.filter(name=\"John\", order_by=[\"age\", \"-name\"])\n</code></pre> <pre><code>SELECT * FROM user WHERE name = 'John' ORDER BY age, name DESC;\n</code></pre>"},{"location":"Usage/save-read-update-delete/","title":"Save, read, update and delete data","text":""},{"location":"Usage/save-read-update-delete/#save-data","title":"Save data","text":"<p>To save data to the database, create an instance of the <code>DBModel</code> class and call the <code>save</code> method. This will create a new record in the database if the primary key is not present, or update an existing record if the primary key is already present.</p> PythonSQL Result <pre><code>user = User(name=\"John\", age=30)\nuser.save()\n</code></pre> <pre><code>INSERT INTO user (name, age) VALUES ('John', 30);\n</code></pre>"},{"location":"Usage/save-read-update-delete/#read-single-record","title":"Read single record","text":"<p>To read a single record from the database, use the <code>get</code> with keyword arguments to filter the record by the specified fields.</p> PythonSQL Result <pre><code>user = User.get(id=1)\n&gt;&gt;&gt; User(id=1, name='John', age=30)\n</code></pre> <pre><code>SELECT * FROM user WHERE id = 1;\n</code></pre>"},{"location":"Usage/save-read-update-delete/#read-all-records","title":"Read all records","text":"<p>To read all records from the database, use the <code>all</code> method, this will return a list of all records in the table.</p> PythonSQL Result <pre><code>users = User.all()\n&gt;&gt;&gt; [User(id=1, name='John', age=30), User(id=2, name='Alice', age=25), ...]\n</code></pre> <pre><code>SELECT * FROM user;\n</code></pre>"},{"location":"Usage/save-read-update-delete/#delete-data","title":"Delete data","text":"<p>To delete a record from the database, call the <code>delete</code> method on the instance of the <code>DBModel</code> class.</p> PythonSQL Result <pre><code>user.delete()\n</code></pre> <pre><code>DELETE FROM user WHERE id = 1;\n</code></pre>"},{"location":"Usage/transactions/","title":"Transactions","text":"<p>Transactions are a way to group multiple operations together. They are atomic, meaning that either all operations in the transaction are applied or none are. This is useful when you want to make sure that multiple operations are applied together or not at all.</p> <p>To use transactions, you can use the <code>transaction</code> context manager. This will start a new transaction and commit the transaction if no exceptions are raised. If an exception is raised, the transaction will be rolled back.</p> PythonSQL Result <pre><code>from ormagic import DBModel, transaction\n\nclass User(DBModel):\n    name: str\n    age: int\n\nwith transaction():\n    user1 = User(name=\"John\", age=30)\n    user1.save()\n\n    user2 = User(name=\"Alice\", age=25)\n    user2.save()\n</code></pre> <pre><code>BEGIN;\nINSERT INTO user (name, age) VALUES ('John', 30);\nINSERT INTO user (name, age) VALUES ('Alice', 25);\nCOMMIT;\n</code></pre>"},{"location":"Usage/unique/","title":"Unique constraints","text":"<p>To define a unique constraint, use the <code>unique</code> parameter set to <code>True</code> in the Pydantic field.</p> PythonSQL Result <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n    email: str = DBField(unique=True)\n</code></pre> <pre><code>CREATE TABLE user (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL\n);\n</code></pre>"},{"location":"Usage/unique/#one-to-one-relationships","title":"One to one relationships","text":"<p>You can also use the <code>unique</code> parameter to define one to one relationships between tables.</p> PythonSQL Result <pre><code>from ormagic import DBModel, DBField\n\nclass User(DBModel):\n    name: str\n\nclass UserProfile(DBModel):\n    user: User = DBField(unique=True)\n    bio: str\n</code></pre> <pre><code>CREATE TABLE user (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL\n);\nCREATE TABLE user_profile (\n    id INTEGER PRIMARY KEY,\n    user_id INTEGER UNIQUE NOT NULL,\n    bio TEXT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES user (id)\n);\n</code></pre>"}]}